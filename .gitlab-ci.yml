.releasePatternt: &releasePattern /^prod-mci-.*$/
.stagingPattern: &stagingPattern /^staging-.*$/
.testingPattern: &testingPattern testing


.productionOnly-kaz: &productionOnly-kaz
  only:
    - *releasePattern
  except:
    - branches


.testingOnly: &testingOnly
  only:
    - *testingPattern


.stagingOnly: &stagingOnly
  only:
    - *stagingPattern


.productionAndStagingOnly: &productionAndStagingOnly
  only:
    - *releasePattern
    - *stagingPattern


stages:
  - dependency
  - build
  - deploy


variables:
  VERSIONED_TAG: "$CI_COMMIT_REF_NAME.$CI_COMMIT_SHORT_SHA"
  PACKAGE_LAYER_IMAGE_HEAD: "$CI_REGISTRY_IMAGE/package:$CI_COMMIT_REF_SLUG"
  PACKAGE_LAYER_IMAGE_DEVELOP: "$CI_REGISTRY_IMAGE/package:develop"
  PACKAGE_LAYER_IMAGE_STABLE: "$CI_REGISTRY_IMAGE/package:stable"
  PACKAGE_LAYER_IMAGE_LATEST: "$CI_REGISTRY_IMAGE/package:latest"
  BASE_LAYER_IMAGE_HEAD: "$CI_REGISTRY_IMAGE/base:$CI_COMMIT_REF_SLUG"
  BASE_LAYER_IMAGE_DEVELOP: "$CI_REGISTRY_IMAGE/base:develop"
  BASE_LAYER_IMAGE_STABLE: "$CI_REGISTRY_IMAGE/base:stable"
  BASE_LAYER_IMAGE_LATEST: "$CI_REGISTRY_IMAGE/base:latest"
  BASE_LAYER_IMAGE_TEST: "$CI_REGISTRY_IMAGE/base:test"
  IMAGE_VERSIONED: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME.$CI_COMMIT_SHORT_SHA"
  IMAGE_DEVELOP: "$CI_REGISTRY_IMAGE:develop"
  IMAGE_STABLE: "$CI_REGISTRY_IMAGE:stable"
  IMAGE_LATEST: "$CI_REGISTRY_IMAGE:latest"
  DOCKER_BUILDKIT: "1"


dependency:mvn:
  stage: dependency
  interruptible: true
  tags:
    - docker
  retry: 2
  script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - >
      docker build
      --pull
      -f Dockerfile
      --target build
      --cache-from $PACKAGE_LAYER_IMAGE_HEAD
      --cache-from $PACKAGE_LAYER_IMAGE_DEVELOP
      --cache-from $PACKAGE_LAYER_IMAGE_STABLE
      --cache-from $PACKAGE_LAYER_IMAGE_LATEST
      -t $PACKAGE_LAYER_IMAGE_HEAD
      .
    - docker push $PACKAGE_LAYER_IMAGE_HEAD

build:
  stage: build
  interruptible: true
  tags:
    - docker
  <<: *productionOnly-kaz
  retry: 2
  script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - >
      docker build
      --pull
      -f Dockerfile
      --target base
      --cache-from $BASE_LAYER_IMAGE_HEAD
      --cache-from $BASE_LAYER_IMAGE_DEVELOP
      --cache-from $BASE_LAYER_IMAGE_STABLE
      --cache-from $BASE_LAYER_IMAGE_LATEST
      -t $BASE_LAYER_IMAGE_HEAD
      .
    - docker push $BASE_LAYER_IMAGE_HEAD
    - >
      docker build
      --pull
      -f Dockerfile
      --target release
      --cache-from $BASE_LAYER_IMAGE_HEAD
      --cache-from $BASE_LAYER_IMAGE_DEVELOP
      --cache-from $BASE_LAYER_IMAGE_STABLE
      --cache-from $BASE_LAYER_IMAGE_LATEST
      --cache-from $PACKAGE_LAYER_IMAGE_HEAD
      --cache-from $PACKAGE_LAYER_IMAGE_DEVELOP
      --cache-from $PACKAGE_LAYER_IMAGE_STABLE
      --cache-from $PACKAGE_LAYER_IMAGE_LATEST
      --cache-from $IMAGE_VERSIONED
      --cache-from $IMAGE_DEVELOP
      --cache-from $IMAGE_STABLE
      --cache-from $IMAGE_LATEST
      -t $IMAGE_VERSIONED
      .
    - docker push $IMAGE_VERSIONED


build:staging:
  stage: build
  interruptible: true
  tags:
    - docker
  <<: *stagingOnly
  retry: 2
  script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - >
      docker build
      --pull
      -f Dockerfile
      --target base
      --cache-from $BASE_LAYER_IMAGE_HEAD
      --cache-from $BASE_LAYER_IMAGE_DEVELOP
      --cache-from $BASE_LAYER_IMAGE_STABLE
      --cache-from $BASE_LAYER_IMAGE_LATEST
      -t $BASE_LAYER_IMAGE_DEVELOP
      .
    - docker push $BASE_LAYER_IMAGE_DEVELOP
    - >
      docker build
      --pull
      -f Dockerfile
      --target release
      --cache-from $BASE_LAYER_IMAGE_HEAD
      --cache-from $BASE_LAYER_IMAGE_DEVELOP
      --cache-from $BASE_LAYER_IMAGE_STABLE
      --cache-from $BASE_LAYER_IMAGE_LATEST
      --cache-from $PACKAGE_LAYER_IMAGE_HEAD
      --cache-from $PACKAGE_LAYER_IMAGE_DEVELOP
      --cache-from $PACKAGE_LAYER_IMAGE_STABLE
      --cache-from $PACKAGE_LAYER_IMAGE_LATEST
      --cache-from $IMAGE_VERSIONED
      --cache-from $IMAGE_DEVELOP
      --cache-from $IMAGE_STABLE
      --cache-from $IMAGE_LATEST
      -t $IMAGE_VERSIONED
      .
    - docker push $IMAGE_VERSIONED


build:testing:
  stage: build
  interruptible: true
  tags:
    - docker
  <<: *testingOnly
  retry: 2
  script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - >
      docker build
      --pull
      -f Dockerfile
      --target base
      --cache-from $BASE_LAYER_IMAGE_HEAD
      --cache-from $BASE_LAYER_IMAGE_TEST
      --cache-from $BASE_LAYER_IMAGE_STABLE
      --cache-from $BASE_LAYER_IMAGE_LATEST
      -t $BASE_LAYER_IMAGE_TEST
      .
    - docker push $BASE_LAYER_IMAGE_TEST
    - >
      docker build
      --pull
      -f Dockerfile
      --target release
      --cache-from $BASE_LAYER_IMAGE_HEAD
      --cache-from $BASE_LAYER_IMAGE_DEVELOP
      --cache-from $BASE_LAYER_IMAGE_STABLE
      --cache-from $BASE_LAYER_IMAGE_LATEST
      --cache-from $PACKAGE_LAYER_IMAGE_HEAD
      --cache-from $PACKAGE_LAYER_IMAGE_DEVELOP
      --cache-from $PACKAGE_LAYER_IMAGE_STABLE
      --cache-from $PACKAGE_LAYER_IMAGE_LATEST
      --cache-from $IMAGE_VERSIONED
      --cache-from $IMAGE_DEVELOP
      --cache-from $IMAGE_STABLE
      --cache-from $IMAGE_LATEST
      -t $IMAGE_VERSIONED
      .
    - docker push $IMAGE_VERSIONED


deploy:production:
  stage: deploy
  interruptible: true
  tags:
    - k8s-kaz
    - production-kaz 
  <<: *productionOnly-kaz
  environment:
    name: Production
    url: https://currency-exchange.k8s.igap.im
  retry: 2
  image:
    name: lachlanevenson/k8s-helm:v3.2.3
    entrypoint: [""]
  script:
    - helm repo add igap https://charts.igap.im --username $CHARTMUSEUM_USER --password $CHARTMUSEUM_PASS_IGAP_IM
    - >
      helm
      upgrade --install
      --atomic
      --namespace currency-exchange-redis
      --create-namespace
      --wait
      --timeout=30m0s
      currency-exchange-redis
      igap/redis
    - >
      helm
      upgrade --install
      --atomic
      --namespace currency-exchange
      --create-namespace
      --wait
      --timeout=30m0s
      currency-exchange
      igap/serve
      -f devops/k8s/production-kaz.yaml
      --set image.tag=${VERSIONED_TAG}
      --set environment.PORT=${PORT}
      --set environment.REDIS_HOST=${REDIS_HOST}
      --set environment.REDIS_PORT=${REDIS_PORT}
      --set environment.REDIS_DB=${REDIS_DB}
      --set environment.THROTTLER_REDIS_DB=${THROTTLER_REDIS_DB}
      --set environment.MONGODB_URI=mongodb://${MONGODB_DB}:${MONGODB_PASS}@${MONGODB_URI}:${MONGODB_PORT}/${MONGODB_DB}
      --set environment.SESSION_TIME=${SESSION_TIME}
      --set environment.REDIS_EXPIRE_OTP=${REDIS_EXPIRE_OTP}
      --set environment.SEND_SMS_URL=${SEND_SMS_URL}
      --set environment.SEND_SMS_USERNAME=${SEND_SMS_USERNAME}
      --set environment.SEND_SMS_FROM=${SEND_SMS_FROM}
      --set environment.PARSIAN_BASE_URL=${PARSIAN_BASE_URL}
      --set environment.PARSIAN_OAUTH_BASE_URL=${PARSIAN_OAUTH_BASE_URL}
      --set environment.PARSIAN_OAUTH_CLIENT_ID=${PARSIAN_OAUTH_CLIENT_ID}
      --set environment.PARSIAN_PAYMENT_SERVICE_ID=${PARSIAN_PAYMENT_SERVICE_ID}
      --set environment.PARSIAN_PAYMENT_TIMEOUT=30000
      --set environment.SANA_BASE_URL=${SANA_BASE_URL}
      --set environment.SANA_USERNAME=${SANA_USERNAME}
      --set environment.PAYMENT_OTP_EXPIRE_TIME=120
      --set environment.PAYMENT_OTP_MAX_TRIAL=5
      --set environment.PARSIAN_DB_HOST=${PARSIAN_DB_HOST}
      --set environment.PARSIAN_DB_PORT=${PARSIAN_DB_PORT}
      --set environment.PARSIAN_DB_USERNAME=${PARSIAN_DB_USERNAME}
      --set environment.PARSIAN_DB_SCHEMA=${PARSIAN_DB_SCHEMA}
      --set environment.PARSIAN_DB_SERVICE_NAME=${PARSIAN_DB_SERVICE_NAME}
      --set environment.PARSIAN_DB_DATABASE=${PARSIAN_DB_DATABASE}
      --set environment.JOBS_REDIS_DB=${JOBS_REDIS_DB}
      --set environment.REDIS_EXPIRE_ORDER=${REDIS_EXPIRE_ORDER}
      --set environment.REDIS_EXPIRE_EXCHANGE=${REDIS_EXPIRE_EXCHANGE}
      --set environment.ELASTIC_APM_ACTIVE=true
      --set environment.ELASTIC_APM_ENVIRONMENT=stage
      --set environment.ELASTIC_APM_SERVICE_NAME=currency-exchange
      --set environment.ELASTIC_APM_SERVER_URL=http://apm-k8sinfra.igap.im
      --set environment.PARSIAN_BRANCH_CODE=${PARSIAN_BRANCH_CODE}
      --set environment.VERSION=production
      --set environment.BOTLAND_BASE_URL=https://api.igap.net/botland
      --set environment.NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
      --set environment.SPLUNK_URI=${SPLUNK_URI}
      --set environment.SPLUNK_HOST=${SPLUNK_HOST}
      --set environment.SPLUNK_SOURCE=${SPLUNK_SOURCE}
      --set environment.SPLUNK_SOURCE_TYPE=${SPLUNK_SOURCE_TYPE}
      --set environment.SPLUNK_INDEX=${SPLUNK_INDEX}
      --set environment.PANEL_WHITE_LIST_IPS=${PANEL_WHITE_LIST_IPS}
      --set secret.SPLUNK_TOKEN=${SPLUNK_TOKEN}
      --set secret.PARSIAN_ACCESS_TOKEN=${PARSIAN_ACCESS_TOKEN}
      --set secret.BOT_TOKEN=${BOT_TOKEN}
      --set secret.DB_ENC_KEY=${DB_ENC_KEY}
      --set secret.SANA_PASSWORD=${SANA_PASSWORD}
      --set secret.PARSIAN_DB_PASSWORD=${PARSIAN_DB_PASSWORD}
      --set secret.PARSIAN_OAUTH_CLIENT_SECRET=${PARSIAN_OAUTH_CLIENT_SECRET}
      --set secret.REFRESH_TOKEN=${REFRESH_TOKEN}
      --set secret.SEND_SMS_PASSWORD=${SEND_SMS_PASSWORD}
      --set secret.SESSION_SECRET=${SESSION_SECRET}
      
      
deploy:staging:
  stage: deploy
  interruptible: true
  tags:
    - stk8s
    - staging
  <<: *stagingOnly
  environment:
    name: staging
    url: https://currency-exchange.k8s.igap.im
  retry: 2
  image:
    name: lachlanevenson/k8s-helm:v3.2.3
    entrypoint: [""]
  script:
    - helm repo add igap https://charts.igap.im --username $CHARTMUSEUM_USER --password $CHARTMUSEUM_PASS_IGAP_IM
    - >
      helm
      upgrade --install
      --atomic
      --namespace currency-exchange-redis
      --create-namespace
      --wait
      --timeout=30m0s
      currency-exchange-redis
      igap/redis
    - >
      helm
      upgrade --install
      --atomic
      --namespace currency-exchange
      --create-namespace
      --wait
      --timeout=30m0s
      currency-exchange
      igap/serve
      -f devops/k8s/staging.yaml
      --set image.tag=${VERSIONED_TAG}
      --set environment.PORT=${PORT}
      --set environment.REDIS_HOST=${REDIS_HOST}
      --set environment.REDIS_PORT=${REDIS_PORT}
      --set environment.REDIS_DB=${REDIS_DB}
      --set environment.THROTTLER_REDIS_DB=${THROTTLER_REDIS_DB}
      --set environment.MONGODB_URI=mongodb://${MONGODB_DB}:${MONGODB_PASS}@${MONGODB_URI}:${MONGODB_PORT}/${MONGODB_DB}
      --set environment.SESSION_TIME=${SESSION_TIME}
      --set environment.REDIS_EXPIRE_OTP=${REDIS_EXPIRE_OTP}
      --set environment.SEND_SMS_URL=${SEND_SMS_URL}
      --set environment.SEND_SMS_USERNAME=${SEND_SMS_USERNAME}
      --set environment.SEND_SMS_FROM=${SEND_SMS_FROM}
      --set environment.PARSIAN_BASE_URL=${PARSIAN_BASE_URL}
      --set environment.PARSIAN_OAUTH_BASE_URL=${PARSIAN_OAUTH_BASE_URL}
      --set environment.PARSIAN_OAUTH_CLIENT_ID=${PARSIAN_OAUTH_CLIENT_ID}
      --set environment.PARSIAN_PAYMENT_SERVICE_ID=${PARSIAN_PAYMENT_SERVICE_ID}
      --set environment.PARSIAN_PAYMENT_TIMEOUT=30000
      --set environment.SANA_BASE_URL=${SANA_BASE_URL}
      --set environment.SANA_USERNAME=${SANA_USERNAME}
      --set environment.PAYMENT_OTP_EXPIRE_TIME=120
      --set environment.PAYMENT_OTP_MAX_TRIAL=5
      --set environment.PARSIAN_DB_HOST=${PARSIAN_DB_HOST}
      --set environment.PARSIAN_DB_PORT=${PARSIAN_DB_PORT}
      --set environment.PARSIAN_DB_USERNAME=${PARSIAN_DB_USERNAME}
      --set environment.PARSIAN_DB_SCHEMA=${PARSIAN_DB_SCHEMA}
      --set environment.PARSIAN_DB_SERVICE_NAME=${PARSIAN_DB_SERVICE_NAME}
      --set environment.PARSIAN_DB_DATABASE=${PARSIAN_DB_DATABASE}
      --set environment.JOBS_REDIS_DB=${JOBS_REDIS_DB}
      --set environment.REDIS_EXPIRE_ORDER=${REDIS_EXPIRE_ORDER}
      --set environment.REDIS_EXPIRE_EXCHANGE=${REDIS_EXPIRE_EXCHANGE}
      --set environment.ELASTIC_APM_ACTIVE=true
      --set environment.ELASTIC_APM_ENVIRONMENT=stage
      --set environment.ELASTIC_APM_SERVICE_NAME=currency-exchange
      --set environment.ELASTIC_APM_SERVER_URL=http://apm-k8sinfra.igap.im
      --set environment.PARSIAN_BRANCH_CODE=${PARSIAN_BRANCH_CODE}
      --set environment.VERSION=stage
      --set environment.BOTLAND_BASE_URL=https://api.igap.net/botland
      --set environment.NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
      --set environment.PARSIAN_ACCESS_TOKEN=${PARSIAN_ACCESS_TOKEN}
      --set environment.PANEL_WHITE_LIST_IPS=${PANEL_WHITE_LIST_IPS}
      --set secret.BOT_TOKEN=${BOT_TOKEN}
      --set secret.DB_ENC_KEY=${DB_ENC_KEY}
      --set secret.SANA_PASSWORD=${SANA_PASSWORD}
      --set secret.PARSIAN_DB_PASSWORD=${PARSIAN_DB_PASSWORD}
      --set secret.PARSIAN_OAUTH_CLIENT_SECRET=${PARSIAN_OAUTH_CLIENT_SECRET}
      --set secret.REFRESH_TOKEN=${REFRESH_TOKEN}
      --set secret.SESSION_SECRET=${SESSION_SECRET}
      --set secret.SEND_SMS_PASSWORD=${SEND_SMS_PASSWORD}
     

     

deploy:testing:
  stage: deploy
  interruptible: true
  tags:
    - stk8s
    - staging
  <<: *testingOnly
  environment:
    name: testing
    url: https://test.currency-exchange.k8s.igap.in
  retry: 2
  image:
    name: lachlanevenson/k8s-helm:v3.2.3
    entrypoint: [""]
  script:
    - helm repo add igap https://charts.igap.im --username $CHARTMUSEUM_USER --password $CHARTMUSEUM_PASS_IGAP_IM
    - >
      helm
      upgrade --install
      --atomic
      --namespace tscurrency-exchange
      --create-namespace
      --wait
      --timeout=30m0s
      tscurrency-exchange
      igap/serve
      -f devops/k8s/testing.yaml
      --set image.tag=${VERSIONED_TAG}


deploy:tag:latest:
  stage: deploy
  interruptible: true
  variables:
    GIT_STRATEGY: none
  <<: *stagingOnly
  tags:
    - docker
  retry: 2
  script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

    - docker pull $BASE_LAYER_IMAGE_DEVELOP
    - docker tag $BASE_LAYER_IMAGE_DEVELOP $BASE_LAYER_IMAGE_LATEST
    - docker push $BASE_LAYER_IMAGE_LATEST

    - docker pull $PACKAGE_LAYER_IMAGE_HEAD
    - docker tag $PACKAGE_LAYER_IMAGE_HEAD $PACKAGE_LAYER_IMAGE_LATEST
    - docker push $PACKAGE_LAYER_IMAGE_LATEST

    - docker pull $IMAGE_VERSIONED
    - docker tag $IMAGE_VERSIONED $IMAGE_LATEST
    - docker push $IMAGE_LATEST

deploy:tag:stable:
  stage: deploy
  interruptible: true
  variables:
    GIT_STRATEGY: none
  <<: *productionOnly-kaz
  tags:
    - docker
  retry: 2
  script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

    - docker pull $BASE_LAYER_IMAGE_HEAD
    - docker tag $BASE_LAYER_IMAGE_HEAD $BASE_LAYER_IMAGE_STABLE
    - docker push $BASE_LAYER_IMAGE_STABLE

    - docker pull $PACKAGE_LAYER_IMAGE_HEAD
    - docker tag $PACKAGE_LAYER_IMAGE_HEAD $PACKAGE_LAYER_IMAGE_STABLE
    - docker push $PACKAGE_LAYER_IMAGE_STABLE

    - docker pull $IMAGE_VERSIONED
    - docker tag $IMAGE_VERSIONED $IMAGE_STABLE
    - docker push $IMAGE_STABLE

